@page
@model IndexModel
@{
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
    ViewData["Title"] = "Home page";
    var apiKey= @Configuration.GetSection("Keys")["API_KEY"];
    var appId = @Configuration.GetSection("Keys")["APP_ID"];
    var clientId = @Configuration.GetSection("Keys")["CLIENT_ID"];
}

<div>
    <h1>Google Spreadsheet -> Google Docs</h1>
    <div id="multi-step-form-container">
        <!-- Form Steps / Progress Bar -->
        <ul class="form-stepper form-stepper-horizontal text-center mx-auto pl-0">
            <!-- Step 1 -->
            <li class="form-stepper-active text-center form-stepper-list" step="1">
                <a class="mx-2">
                    <span class="form-stepper-circle">
                        <span>1</span>
                    </span>
                    <div class="label">Choose file</div>
                </a>
            </li>
            <!-- Step 2 -->
            <li class="form-stepper-unfinished text-center form-stepper-list" step="2">
                <a class="mx-2">
                    <span class="form-stepper-circle text-muted">
                        <span>2</span>
                    </span>
                    <div class="label text-muted">File location</div>
                </a>
            </li>
        </ul>
        <!-- Step Wise Form Content -->
        <form id="userAccountSetupForm" name="userAccountSetupForm" enctype="multipart/form-data" method="POST">
            <!-- Step 1 Content -->
            <section id="step-1" class="form-step">
                <h2 class="font-normal">Login to your google account and choose your file</h2>
                <!-- Step 1 input fields -->
                <div class="mt-3">
                </div>
                <div class="mt-3">
                    <button class="button btn-navigate-form-step next-step-button" type="button" step_number="2">Next</button>
                </div>
            </section>
            <!-- Step 2 Content, default hidden on page load. -->
            <section id="step-2" class="form-step d-none">
                <h2 class="font-normal">Choose file location and convert</h2>
                <p class="font-normal">*After you select your file location converting will start immediately</p>
                <!-- Step 2 input fields -->
                <div class="mt-3">
                </div>
                <div class="mt-3">
                    <button class="button btn-navigate-form-step" type="button" step_number="1">Prev</button>
                </div>
            </section>
        </form>
    </div>
</div>

<button id="authorize_button" onclick="handleAuthClick()">Choose file</button>
<button id="signout_button" onclick="handleSignoutClick()">Sign Out</button>
<button id="filelocation_button" type="button" value="Choose location" onclick="chooseFileLocation()">Choose file location</button>

<pre id="content" style="white-space: pre-wrap;"></pre>
<div class="alert alert-success fade" role="alert">
    This is a success alert—check it out!
</div>
<div class="alert alert-danger fade" role="alert">
    This is a danger alert—check it out!
</div>
<script type="text/javascript">

    var fileId;
  
     function convertToDocument(parentId){
        var data = {
            ParentId: parentId,
            FileId: fileId
        };
        $.ajax({
            url: "GoogleSheets/Convert",
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (result) {
                $('.alert').alert();
            },
            error:function(result){
                    $('.alert-danger').alert();
            }});
    }

    function chooseFileLocation(){
        var docsView = new google.picker.DocsView()
            .setIncludeFolders(true)
            .setMimeTypes('application/vnd.google-apps.folder')
            .setSelectFolderEnabled(true);

        var callback = function (data) {
            if (data.action == google.picker.Action.PICKED) {
                var doc = data.docs[0];
               
                convertToDocument(doc.id);
            }
        };

        var picker = new google.picker.PickerBuilder()
            .setDeveloperKey(API_KEY)
            .setAppId(APP_ID)
            .setOAuthToken(accessToken)
            .addView(docsView)
            .setCallback(callback)
            .build();

        picker.setVisible(true);
    }

    const SCOPES = 'https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/documents';
    const CLIENT_ID = "@clientId";
    const API_KEY = "@apiKey";
    const APP_ID = "@appId";

  let tokenClient;
  let accessToken = null;
  let pickerInited = false;
  let gisInited = false;


  document.getElementById('authorize_button').style.visibility = 'hidden';
  document.getElementById('signout_button').style.visibility = 'hidden';
  document.getElementById('filelocation_button').style.visibility = 'hidden';

  /**
   * Callback after api.js is loaded.
   */
  function gapiLoaded() {
    gapi.load('client:picker', initializePicker);
  }

  /**
   * Callback after the API client is loaded. Loads the
   * discovery doc to initialize the API.
   */
  async function initializePicker() {
    await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
    pickerInited = true;
    maybeEnableButtons();
  }

  /**
   * Callback after Google Identity Services are loaded.
   */
  function gisLoaded() {
    tokenClient = google.accounts.oauth2.initTokenClient({
      client_id: CLIENT_ID,
      scope: SCOPES,
      callback: '', // defined later
    });
    gisInited = true;
    maybeEnableButtons();
  }

  /**
   * Enables user interaction after all libraries are loaded.
   */
  function maybeEnableButtons() {
    if (pickerInited && gisInited) {
      document.getElementById('authorize_button').style.visibility = 'visible';
    }
  }

  function handleAuthClick() {
    tokenClient.callback = async (response) => {
      if (response.error !== undefined) {
        throw (response);
      }
      accessToken = response.access_token;
      document.getElementById('signout_button').style.visibility = 'visible';
      document.getElementById('authorize_button').innerText = 'Refresh';
      await createPicker();
    };

    if (accessToken === null) {
      // Prompt the user to select a Google Account and ask for consent to share their data
      // when establishing a new session.
      tokenClient.requestAccessToken({prompt: 'consent'});
    } else {
      // Skip display of account chooser and consent dialog for an existing session.
      tokenClient.requestAccessToken({prompt: ''});
    }
  }

  function handleSignoutClick() {
    if (accessToken) {
      accessToken = null;
      google.accounts.oauth2.revoke(accessToken);
      document.getElementById('content').innerText = '';
      document.getElementById('authorize_button').innerText = 'Choose file';
      document.getElementById('signout_button').style.visibility = 'hidden';
    }
  }

  function createPicker() {
    const picker = new google.picker.PickerBuilder()
        .enableFeature(google.picker.Feature.NAV_HIDDEN)
        .setDeveloperKey(API_KEY)
        .setAppId(APP_ID)
        .setOAuthToken(accessToken)
        .addView(google.picker.ViewId.SPREADSHEETS)
        .addView(new google.picker.DocsUploadView())
        .setCallback(pickerCallback)
        .build();
    picker.setVisible(true);
  }

  async function pickerCallback(data) {
    if (data.action === google.picker.Action.PICKED) {
      let text = `Picker response: \n${JSON.stringify(data, null, 2)}\n`;
      const document = data[google.picker.Response.DOCUMENTS][0];
      fileId = document[google.picker.Document.ID];
      const res = await gapi.client.drive.files.get({
        'fileId': fileId,
        'fields': '*',
      });
      text += `Drive API response for first document: \n${JSON.stringify(res.result, null, 2)}\n`;
      window.document.getElementById('content').innerText = text;
    }
  }
    
</script>
<script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
<script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>